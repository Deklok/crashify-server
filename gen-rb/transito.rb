#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'freway_types'

module Transito
  class Client
    include ::Thrift::Client

    def iniciarSesion(email, password)
      send_iniciarSesion(email, password)
      return recv_iniciarSesion()
    end

    def send_iniciarSesion(email, password)
      send_message('iniciarSesion', IniciarSesion_args, :email => email, :password => password)
    end

    def recv_iniciarSesion()
      result = receive_message(IniciarSesion_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'iniciarSesion failed: unknown result')
    end

    def registrarUsuario(usuario)
      send_registrarUsuario(usuario)
      return recv_registrarUsuario()
    end

    def send_registrarUsuario(usuario)
      send_message('registrarUsuario', RegistrarUsuario_args, :usuario => usuario)
    end

    def recv_registrarUsuario()
      result = receive_message(RegistrarUsuario_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'registrarUsuario failed: unknown result')
    end

    def obtenerUsuarios()
      send_obtenerUsuarios()
      return recv_obtenerUsuarios()
    end

    def send_obtenerUsuarios()
      send_message('obtenerUsuarios', ObtenerUsuarios_args)
    end

    def recv_obtenerUsuarios()
      result = receive_message(ObtenerUsuarios_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'obtenerUsuarios failed: unknown result')
    end

    def getAllReportes()
      send_getAllReportes()
      return recv_getAllReportes()
    end

    def send_getAllReportes()
      send_message('getAllReportes', GetAllReportes_args)
    end

    def recv_getAllReportes()
      result = receive_message(GetAllReportes_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllReportes failed: unknown result')
    end

    def getReporte(idReporte)
      send_getReporte(idReporte)
      return recv_getReporte()
    end

    def send_getReporte(idReporte)
      send_message('getReporte', GetReporte_args, :idReporte => idReporte)
    end

    def recv_getReporte()
      result = receive_message(GetReporte_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getReporte failed: unknown result')
    end

    def dictaminarReporte(dictamen, idPerito, idReporte)
      send_dictaminarReporte(dictamen, idPerito, idReporte)
      return recv_dictaminarReporte()
    end

    def send_dictaminarReporte(dictamen, idPerito, idReporte)
      send_message('dictaminarReporte', DictaminarReporte_args, :dictamen => dictamen, :idPerito => idPerito, :idReporte => idReporte)
    end

    def recv_dictaminarReporte()
      result = receive_message(DictaminarReporte_result)
      return result.success unless result.success.nil?
      raise result.exp unless result.exp.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'dictaminarReporte failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_iniciarSesion(seqid, iprot, oprot)
      args = read_args(iprot, IniciarSesion_args)
      result = IniciarSesion_result.new()
      begin
        result.success = @handler.iniciarSesion(args.email, args.password)
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'iniciarSesion', seqid)
    end

    def process_registrarUsuario(seqid, iprot, oprot)
      args = read_args(iprot, RegistrarUsuario_args)
      result = RegistrarUsuario_result.new()
      begin
        result.success = @handler.registrarUsuario(args.usuario)
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'registrarUsuario', seqid)
    end

    def process_obtenerUsuarios(seqid, iprot, oprot)
      args = read_args(iprot, ObtenerUsuarios_args)
      result = ObtenerUsuarios_result.new()
      begin
        result.success = @handler.obtenerUsuarios()
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'obtenerUsuarios', seqid)
    end

    def process_getAllReportes(seqid, iprot, oprot)
      args = read_args(iprot, GetAllReportes_args)
      result = GetAllReportes_result.new()
      begin
        result.success = @handler.getAllReportes()
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'getAllReportes', seqid)
    end

    def process_getReporte(seqid, iprot, oprot)
      args = read_args(iprot, GetReporte_args)
      result = GetReporte_result.new()
      begin
        result.success = @handler.getReporte(args.idReporte)
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'getReporte', seqid)
    end

    def process_dictaminarReporte(seqid, iprot, oprot)
      args = read_args(iprot, DictaminarReporte_args)
      result = DictaminarReporte_result.new()
      begin
        result.success = @handler.dictaminarReporte(args.dictamen, args.idPerito, args.idReporte)
      rescue ::Error => exp
        result.exp = exp
      end
      write_result(result, oprot, 'dictaminarReporte', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class IniciarSesion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EMAIL = 1
    PASSWORD = 2

    FIELDS = {
      EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IniciarSesion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Usuario},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegistrarUsuario_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    USUARIO = 1

    FIELDS = {
      USUARIO => {:type => ::Thrift::Types::STRUCT, :name => 'usuario', :class => ::Usuario}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegistrarUsuario_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Respuesta},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuarios_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ObtenerUsuarios_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Usuario}},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllReportes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllReportes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Reporte}},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReporte_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    IDREPORTE = 1

    FIELDS = {
      IDREPORTE => {:type => ::Thrift::Types::I32, :name => 'idReporte'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReporte_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Reporte},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DictaminarReporte_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DICTAMEN = 1
    IDPERITO = 2
    IDREPORTE = 3

    FIELDS = {
      DICTAMEN => {:type => ::Thrift::Types::STRUCT, :name => 'dictamen', :class => ::Dictamen},
      IDPERITO => {:type => ::Thrift::Types::I32, :name => 'idPerito'},
      IDREPORTE => {:type => ::Thrift::Types::I32, :name => 'idReporte'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DictaminarReporte_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EXP = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Respuesta},
      EXP => {:type => ::Thrift::Types::STRUCT, :name => 'exp', :class => ::Error}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

